; ---------------------------------------------------------------------------

Elf32_Sym       struc ; (sizeof=0x10, align=0x4, mappedto_1)
                                        ; XREF: LOAD:000001D0/r
                                        ; LOAD:000001E0/r ...
st_name         dd ?                    ; offset (00000330)
st_value        dd ?                    ; offset (00000000)
st_size         dd ?
st_info         db ?
st_other        db ?
st_shndx        dw ?
Elf32_Sym       ends

; ---------------------------------------------------------------------------

Elf32_Rel       struc ; (sizeof=0x8, align=0x4, copyof_2)
                                        ; XREF: LOAD:00000494/r
                                        ; LOAD:0000049C/r ...
r_offset        dd ?
r_info          dd ?
Elf32_Rel       ends

; ---------------------------------------------------------------------------

Elf32_Dyn       struc ; (sizeof=0x8, align=0x4, copyof_3)
                                        ; XREF: LOAD:stru_1EF4/r
                                        ; LOAD:00001EFC/r ...
d_tag           dd ?
d_un            Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ?
Elf32_Dyn       ends

; ---------------------------------------------------------------------------

Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 union ; (sizeof=0x4, align=0x4, copyof_4)
                                        ; XREF: Elf32_Dyn/r
d_val           dd ?
d_ptr           dd ?
Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 1CED88FE4E9290EA299F07CA7C641B1643AD1A5F9A2D72700A9119B684245E66
; Input MD5    : B14304339B78608F42232EB33D34BA54
; Input CRC32  : 55E7EBD7

; File Name   : /home/ajc/Documents/code/security-stuff/ice-ctf/lock.out
; Format      : ELF for Intel 386 (Shared object)
; Interpreter '/lib/ld-linux.so.2'
; Needed Library 'libc.so.6'
;

                .386
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:000001E0↓o
                                        ; LOAD:000001F0↓o ...
                                        ; File format: \x7FELF
                db 1                    ; File class: 32-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3                    ; Machine: Intel 386
                dd 1                    ; File version
                dd offset start         ; Entry point
                dd 34h                  ; PHT file offset
                dd 1174h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 34h                  ; ELF header size
                dw 20h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 28h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF32 Program Header
; PHT Entry 0
dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
                                        ; Type: PHDR
                dd 34h                  ; File offset
                dd offset dword_34      ; Virtual address
                dd 34h                  ; Physical address
                dd 120h                 ; Size in file image
                dd 120h                 ; Size in memory image
                dd 5                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 154h                 ; File offset
                dd offset aLibLdLinuxSo2 ; Virtual address
                dd 154h                 ; Physical address
                dd 13h                  ; Size in file image
                dd 13h                  ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0C94h                ; Size in file image
                dd 0C94h                ; Size in memory image
                dd 5                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 0EE8h                ; File offset
                dd offset off_1EE8      ; Virtual address
                dd 1EE8h                ; Physical address
                dd 164h                 ; Size in file image
                dd 168h                 ; Size in memory image
                dd 6                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 0EF4h                ; File offset
                dd offset stru_1EF4     ; Virtual address
                dd 1EF4h                ; Physical address
                dd 0F0h                 ; Size in file image
                dd 0F0h                 ; Size in memory image
                dd 6                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 168h                 ; File offset
                dd offset dword_168     ; Virtual address
                dd 168h                 ; Physical address
                dd 44h                  ; Size in file image
                dd 44h                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 0A94h                ; File offset
                dd offset unk_A94       ; Virtual address
                dd 0A94h                ; Physical address
                dd 4Ch                  ; Size in file image
                dd 4Ch                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0                    ; Size in file image
                dd 0                    ; Size in memory image
                dd 6                    ; Flags
                dd 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 0EE8h                ; File offset
                dd offset off_1EE8      ; Virtual address
                dd 1EE8h                ; Physical address
                dd 118h                 ; Size in file image
                dd 118h                 ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
                                        ; DATA XREF: LOAD:0000005C↑o
                align 4
dword_168       dd 4, 10h, 1, 554E47h, 0
                                        ; DATA XREF: LOAD:000000DC↑o
                dd 2, 6, 20h, 4, 14h, 3, 554E47h, 94E1189Bh, 73F45E91h
                dd 5605202Bh, 0A95FD5CEh, 6093A91Ah
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 2
elf_gnu_hash_symbias dd 14h
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 5
elf_gnu_hash_indexes dd 28002400h
elf_gnu_hash_bucket dd 14h, 15h
elf_gnu_hash_chain dd 7C9A7F6Bh, 0C0E34BADh
; ELF Symbol Table
                Elf32_Sym <0>
                Elf32_Sym <offset aStrcmp - offset byte_330, offset dword_0, 0, 12h, \ ; "strcmp"
                           0, 0>
                Elf32_Sym <offset aItmDeregistert - offset byte_330, offset dword_0, \ ; "_ITM_deregisterTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aPrintf - offset byte_330, offset dword_0, 0, 12h, \ ; "printf"
                           0, 0>
                Elf32_Sym <offset aStrcspn - offset byte_330, offset dword_0, 0, 12h, \ ; "strcspn"
                           0, 0>
                Elf32_Sym <offset aFree - offset byte_330, offset dword_0, 0, 12h, 0, \ ; "free"
                           0>
                Elf32_Sym <offset aFgets - offset byte_330, offset dword_0, 0, 12h, 0,\ ; "fgets"
                           0>
                Elf32_Sym <offset aGetegid - offset byte_330, offset dword_0, 0, 12h, \ ; "getegid"
                           0, 0>
                Elf32_Sym <offset aCxaFinalize - offset byte_330, offset dword_0, 0, \ ; "__cxa_finalize"
                           22h, 0, 0>
                Elf32_Sym <offset aPuts - offset byte_330, offset dword_0, 0, 12h, 0, \ ; "puts"
                           0>
                Elf32_Sym <offset aSystem - offset byte_330, offset dword_0, 0, 12h, \ ; "system"
                           0, 0>
                Elf32_Sym <offset aGmonStart - offset byte_330, offset dword_0, 0, \ ; "__gmon_start__"
                           20h, 0, 0>
                Elf32_Sym <offset aStrlen - offset byte_330, offset dword_0, 0, 12h, \ ; "strlen"
                           0, 0>
                Elf32_Sym <offset aLibcStartMain - offset byte_330, offset dword_0, 0,\ ; "__libc_start_main"
                           12h, 0, 0>
                Elf32_Sym <offset aStdin - offset byte_330, offset dword_0, 0, 11h, 0,\ ; "stdin"
                           0>
                Elf32_Sym <offset aStrdup - offset byte_330, offset dword_0, 0, 12h, \ ; "__strdup"
                           0, 0>
                Elf32_Sym <offset aMemfrob - offset byte_330, offset dword_0, 0, 12h, \ ; "memfrob"
                           0, 0>
                Elf32_Sym <offset aJvRegisterclas - offset byte_330, offset dword_0, \ ; "_Jv_RegisterClasses"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aSetresgid - offset byte_330, offset dword_0, 0, \ ; "setresgid"
                           12h, 0, 0>
                Elf32_Sym <offset aItmRegistertmc - offset byte_330, offset dword_0, \ ; "_ITM_registerTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aLibcStartMain+0Dh - offset byte_330, offset main, \ ; "main"
                           0BDh, 12h, 0, 0Eh>
                Elf32_Sym <offset aIoStdinUsed - offset byte_330, \ ; "_IO_stdin_used"
                           offset _IO_stdin_used, 4, 11h, 0, 10h>
; ELF String Table
byte_330        db 0                    ; DATA XREF: LOAD:000001E0↑o
                                        ; LOAD:000001F0↑o ...
aLibcSo6        db 'libc.so.6',0
aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:00000320↑o
aMemfrob        db 'memfrob',0          ; DATA XREF: LOAD:000002D0↑o
aStrdup         db '__strdup',0         ; DATA XREF: LOAD:000002C0↑o
aPuts           db 'puts',0             ; DATA XREF: LOAD:00000260↑o
aStdin          db 'stdin',0            ; DATA XREF: LOAD:000002B0↑o
aPrintf         db 'printf',0           ; DATA XREF: LOAD:00000200↑o
aFgets          db 'fgets',0            ; DATA XREF: LOAD:00000230↑o
aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000290↑o
aStrcspn        db 'strcspn',0          ; DATA XREF: LOAD:00000210↑o
aSetresgid      db 'setresgid',0        ; DATA XREF: LOAD:000002F0↑o
aSystem         db 'system',0           ; DATA XREF: LOAD:00000270↑o
aGetegid        db 'getegid',0          ; DATA XREF: LOAD:00000240↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000250↑o
aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:000001E0↑o
aLibcStartMain  db '__libc_start_main',0
                                        ; DATA XREF: LOAD:000002A0↑o
                                        ; LOAD:00000310↑o
aFree           db 'free',0             ; DATA XREF: LOAD:00000220↑o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:000001F0↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000280↑o
aJvRegisterclas db '_Jv_RegisterClasses',0
                                        ; DATA XREF: LOAD:000002E0↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:00000300↑o
aGlibc213       db 'GLIBC_2.1.3',0
aGlibc20        db 'GLIBC_2.0',0
                align 4
                dd 2 dup(20000h), 2 dup(20002h), 20003h, 2, 2 dup(20002h)
                dd 2 dup(2), 10001h, 20001h, 1, 10h, 0
                dd 9691F73h, 30000h, 0F1h, 10h, 0D696910h, 20000h, 0FDh
                dd 0
; ELF REL Relocation Table
                Elf32_Rel <1EE8h, 8>    ; R_386_RELATIVE
                Elf32_Rel <1EECh, 8>    ; R_386_RELATIVE
                Elf32_Rel <1FF4h, 8>    ; R_386_RELATIVE
                Elf32_Rel <2044h, 8>    ; R_386_RELATIVE
                Elf32_Rel <2048h, 8>    ; R_386_RELATIVE
                Elf32_Rel <1FE4h, 206h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf32_Rel <1FE8h, 806h> ; R_386_GLOB_DAT __cxa_finalize
                Elf32_Rel <1FECh, 0B06h> ; R_386_GLOB_DAT __gmon_start__
                Elf32_Rel <1FF0h, 0E06h> ; R_386_GLOB_DAT stdin
                Elf32_Rel <1FF8h, 1106h> ; R_386_GLOB_DAT _Jv_RegisterClasses
                Elf32_Rel <1FFCh, 1306h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
; ELF JMPREL Relocation Table
                Elf32_Rel <200Ch, 107h> ; R_386_JMP_SLOT strcmp
                Elf32_Rel <2010h, 307h> ; R_386_JMP_SLOT printf
                Elf32_Rel <2014h, 407h> ; R_386_JMP_SLOT strcspn
                Elf32_Rel <2018h, 507h> ; R_386_JMP_SLOT free
                Elf32_Rel <201Ch, 607h> ; R_386_JMP_SLOT fgets
                Elf32_Rel <2020h, 707h> ; R_386_JMP_SLOT getegid
                Elf32_Rel <2024h, 907h> ; R_386_JMP_SLOT puts
                Elf32_Rel <2028h, 0A07h> ; R_386_JMP_SLOT system
                Elf32_Rel <202Ch, 0C07h> ; R_386_JMP_SLOT strlen
                Elf32_Rel <2030h, 0D07h> ; R_386_JMP_SLOT __libc_start_main
                Elf32_Rel <2034h, 0F07h> ; R_386_JMP_SLOT __strdup
                Elf32_Rel <2038h, 1007h> ; R_386_JMP_SLOT memfrob
                Elf32_Rel <203Ch, 1207h> ; R_386_JMP_SLOT setresgid
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use32
                assume cs:_init
                ;org 554h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: sub_980+1C↓p
                push    ebx
                sub     esp, 8
                call    sub_770
                add     ebx, 1AA3h
                mov     eax, ds:(__gmon_start___ptr - 2000h)[ebx]
                test    eax, eax
                jz      short loc_572
                call    sub_668

loc_572:                                ; CODE XREF: _init_proc+17↑j
                add     esp, 8
                pop     ebx
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 577h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use32
                assume cs:_plt
                ;org 580h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_580         proc near               ; CODE XREF: .plt:0000059B↓j
                                        ; .plt:000005AB↓j ...
                push    dword ptr [ebx+4]
                jmp     dword ptr [ebx+8]
sub_580         endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _strcspn. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    10h
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    18h
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _fgets. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    20h ; ' '
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _getegid. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    28h ; '('
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _puts. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    30h ; '0'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    38h ; '8'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _strlen. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    40h ; '@'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    48h ; 'H'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION ___strdup. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    50h ; 'P'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _memfrob. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    58h ; 'X'
                jmp     sub_580
; [00000006 BYTES: COLLAPSED FUNCTION _setresgid. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    60h ; '`'
                jmp     sub_580
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
; Segment alignment 'qword' can not be represented in assembly
_plt_got        segment para public 'CODE' use32
                assume cs:_plt_got
                ;org 660h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_660         proc near               ; CODE XREF: sub_810+2E↓p
                jmp     dword ptr [ebx-18h]
sub_660         endp

; ---------------------------------------------------------------------------
                align 4

; =============== S U B R O U T I N E =======================================


sub_668         proc near               ; CODE XREF: _init_proc+19↑p
                jmp     dword ptr [ebx-14h]
sub_668         endp

; ---------------------------------------------------------------------------
                align 10h
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 670h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame fuzzy-sp

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: LOAD:00000310↑o
                                        ; .got:main_ptr↓o

var_118         = byte ptr -118h
argc            = dword ptr  8
argv            = dword ptr  0Ch
envp            = dword ptr  10h

                lea     ecx, [esp+4]
                and     esp, 0FFFFFFF0h
                push    dword ptr [ecx-4]
                push    ebp
                mov     ebp, esp
                push    esi
                push    ebx
                call    sub_770
                add     ebx, 197Ch
                push    ecx
                lea     esi, [ebp+var_118]
                lea     eax, (aThisIsAPeskyLo - 2000h)[ebx] ; "This is a pesky lock.. do you think you"...
                sub     esp, 118h
                push    eax
                call    _puts
                lea     eax, (aEnterKey - 2000h)[ebx] ; "Enter key: "
                mov     [esp], eax
                call    _printf
                mov     eax, ds:(stdin_ptr - 2000h)[ebx]
                add     esp, 0Ch
                push    dword ptr [eax]
                push    100h
                push    esi
                call    _fgets
                add     esp, 10h
                test    eax, eax
                jz      short loc_707
                lea     eax, (asc_A17 - 2000h)[ebx] ; "\n"
                sub     esp, 8
                push    eax
                push    esi
                call    _strcspn
                mov     [esp], esi
                mov     [ebp+eax+var_118], 0
                call    sub_920
                add     esp, 10h
                test    eax, eax
                jz      short loc_714
                lea     eax, (aKeyFailed - 2000h)[ebx] ; "key failed"
                sub     esp, 0Ch
                push    eax
                call    _puts
                add     esp, 10h

loc_707:                                ; CODE XREF: main+5C↑j
                                        ; main+BB↓j
                lea     esp, [ebp-0Ch]
                xor     eax, eax
                pop     ecx
                pop     ebx
                pop     esi
                pop     ebp
                lea     esp, [ecx-4]
                retn
; ---------------------------------------------------------------------------

loc_714:                                ; CODE XREF: main+83↑j
                lea     eax, (aUnlocked - 2000h)[ebx] ; "unlocked!"
                sub     esp, 0Ch
                push    eax
                call    _puts
                call    sub_8A0
                add     esp, 10h
                jmp     short loc_707
main            endp


; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public start
start           proc near               ; DATA XREF: LOAD:00000018↑o
                xor     ebp, ebp
                pop     esi
                mov     ecx, esp
                and     esp, 0FFFFFFF0h
                push    eax
                push    esp             ; stack_end
                push    edx             ; rtld_fini
                call    sub_75F
                add     ebx, 18C3h
                lea     eax, (nullsub_1 - 2000h)[ebx]
                push    eax             ; fini
                lea     eax, (sub_980 - 2000h)[ebx]
                push    eax             ; init
                push    ecx             ; ubp_av
                push    esi             ; argc
                push    ds:(main_ptr - 2000h)[ebx] ; main
                call    ___libc_start_main
                hlt
start           endp


; =============== S U B R O U T I N E =======================================


sub_75F         proc near               ; CODE XREF: start+B↑p
                mov     ebx, [esp+0]
                retn
sub_75F         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_770         proc near               ; CODE XREF: _init_proc+4↑p
                                        ; main+F↑p ...
                mov     ebx, [esp+0]
                retn
sub_770         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_780         proc near               ; CODE XREF: sub_810:loc_846↓p
                call    sub_89C
                add     edx, 187Bh
                lea     ecx, (byte_204C - 2000h)[edx]
                lea     eax, (unk_204F - 2000h)[edx]
                sub     eax, ecx
                cmp     eax, 6
                jbe     short locret_7B5
                mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 2000h)[edx]
                test    eax, eax
                jz      short locret_7B5
                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                push    ecx
                call    eax
                add     esp, 10h
                leave

locret_7B5:                             ; CODE XREF: sub_780+1C↑j
                                        ; sub_780+26↑j
                rep retn
sub_780         endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_860

loc_7C0:                                ; CODE XREF: sub_860:loc_877↓j
                                        ; sub_860+37↓j
                call    sub_89C
                add     edx, 183Bh
                push    ebp
                lea     ecx, [edx+4Ch]
                lea     eax, [edx+4Ch]
                mov     ebp, esp
                push    ebx
                sub     eax, ecx
                sar     eax, 2
                sub     esp, 4
                mov     ebx, eax
                shr     ebx, 1Fh
                add     eax, ebx
                sar     eax, 1
                jz      short loc_802
                mov     edx, [edx-4]
                test    edx, edx
                jz      short loc_802
                sub     esp, 8
                push    eax
                push    ecx
                call    edx
                add     esp, 10h

loc_802:                                ; CODE XREF: sub_860-74↑j
                                        ; sub_860-6A↑j
                mov     ebx, [ebp-4]
                leave
                retn
; END OF FUNCTION CHUNK FOR sub_860
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_810         proc near               ; DATA XREF: .fini_array:off_1EEC↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ebx
                call    sub_770
                add     ebx, 17E7h
                sub     esp, 4
                cmp     ds:(byte_204C - 2000h)[ebx], 0
                jnz     short loc_852
                mov     eax, ds:(__cxa_finalize_ptr - 2000h)[ebx]
                test    eax, eax
                jz      short loc_846
                sub     esp, 0Ch
                push    (off_2044 - 2000h)[ebx]
                call    sub_660
                add     esp, 10h

loc_846:                                ; CODE XREF: sub_810+23↑j
                call    sub_780
                mov     ds:(byte_204C - 2000h)[ebx], 1

loc_852:                                ; CODE XREF: sub_810+19↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
sub_810         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_860         proc near               ; CODE XREF: sub_980+44↓p
                                        ; DATA XREF: .init_array:off_1EE8↓o

; FUNCTION CHUNK AT 000007C0 SIZE 00000047 BYTES

                call    sub_89C
                add     edx, 179Bh
                lea     eax, (unk_1EF0 - 2000h)[edx]
                mov     ecx, [eax]
                test    ecx, ecx
                jnz     short loc_880

loc_877:                                ; CODE XREF: sub_860+28↓j
                jmp     loc_7C0
; ---------------------------------------------------------------------------
                align 10h

loc_880:                                ; CODE XREF: sub_860+15↑j
                mov     edx, ds:(_Jv_RegisterClasses_ptr - 2000h)[edx]
                test    edx, edx
                jz      short loc_877
                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                push    eax
                call    edx
                add     esp, 10h
                leave
                jmp     loc_7C0
sub_860         endp


; =============== S U B R O U T I N E =======================================


sub_89C         proc near               ; CODE XREF: sub_780↑p
                                        ; sub_860:loc_7C0↑p ...
                mov     edx, [esp+0]
                retn
sub_89C         endp


; =============== S U B R O U T I N E =======================================


sub_8A0         proc near               ; CODE XREF: main+B3↑p

var_1C          = dword ptr -1Ch

                push    ebx
                call    sub_770
                add     ebx, 175Ah
                sub     esp, 8
                call    _getegid
                sub     esp, 4
                push    eax
                push    eax
                push    eax
                call    _setresgid
                lea     eax, (aBinShI - 2000h)[ebx] ; "/bin/sh -i"
                mov     [esp+1Ch+var_1C], eax
                call    _system
                add     esp, 18h
                pop     ebx
                retn
sub_8A0         endp

; ---------------------------------------------------------------------------
                align 10h
                push    edi
                push    esi
                push    ebx
                call    sub_770
                add     ebx, 1718h
                sub     esp, 0Ch
                mov     esi, [ebx+48h]
                push    esi
                call    _strlen
                mov     [esp], esi
                mov     edi, eax
                call    ___strdup
                mov     esi, eax
                pop     eax
                pop     edx
                push    edi
                push    esi
                call    _memfrob
                add     esp, 10h
                mov     eax, esi
                pop     ebx
                pop     esi
                pop     edi
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_920         proc near               ; CODE XREF: main+79↑p

var_1C          = dword ptr -1Ch
arg_0           = dword ptr  4

                push    edi
                push    esi
                push    ebx
                call    sub_770
                add     ebx, 16D8h
                sub     esp, 0Ch
                mov     esi, (off_2048 - 2000h)[ebx]
                push    esi
                call    _strlen
                mov     [esp+1Ch+var_1C], esi
                mov     edi, eax
                call    ___strdup
                mov     esi, eax
                pop     eax
                pop     edx
                push    edi
                push    esi
                call    _memfrob
                pop     ecx
                pop     edi
                push    esi
                push    [esp+18h+arg_0]
                call    _strcmp
                mov     [esp+1Ch+var_1C], esi
                mov     edi, eax
                call    _free
                add     esp, 10h
                mov     eax, edi
                pop     ebx
                pop     esi
                pop     edi
                retn
sub_920         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_980         proc near               ; DATA XREF: start+1D↑o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebp
                push    edi
                push    esi
                push    ebx
                call    sub_770
                add     ebx, 1677h
                sub     esp, 0Ch
                mov     ebp, [esp+1Ch+arg_0]
                lea     esi, (off_1EEC - 2000h)[ebx]
                call    _init_proc
                lea     eax, (off_1EE8 - 2000h)[ebx]
                sub     esi, eax
                sar     esi, 2
                test    esi, esi
                jz      short loc_9D5
                xor     edi, edi
                lea     esi, [esi+0]

loc_9B8:                                ; CODE XREF: sub_980+53↓j
                sub     esp, 4
                push    [esp+20h+arg_8]
                push    [esp+24h+arg_4]
                push    ebp
                call    ds:(off_1EE8 - 2000h)[ebx+edi*4]
                add     edi, 1
                add     esp, 10h
                cmp     esi, edi
                jnz     short loc_9B8

loc_9D5:                                ; CODE XREF: sub_980+2E↑j
                add     esp, 0Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
sub_980         endp

; ---------------------------------------------------------------------------
                align 10h
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 9E2h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use32
                assume cs:_fini
                ;org 9E4h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                push    ebx
                sub     esp, 8
                call    sub_770
                add     ebx, 1613h
                add     esp, 8
                pop     ebx
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use32
                assume cs:_rodata
                ;org 9F8h
                db    3
                db    0
                db    0
                db    0
                public _IO_stdin_used
_IO_stdin_used  db    1                 ; DATA XREF: LOAD:00000320↑o
                db    0
                db    2
                db    0
aBinShI         db '/bin/sh -i',0       ; DATA XREF: sub_8A0+1F↑o
aEnterKey       db 'Enter key: ',0      ; DATA XREF: main+33↑o
asc_A17         db 0Ah,0                ; DATA XREF: main+5E↑o
aUnlocked       db 'unlocked!',0        ; DATA XREF: main:loc_714↑o
aKeyFailed      db 'key failed',0       ; DATA XREF: main+85↑o
                align 10h
aThisIsAPeskyLo db 'This is a pesky lock.. do you think you can open it?',0
                                        ; DATA XREF: main+21↑o
                align 4
unk_A68         db  4Bh ; K             ; DATA XREF: .data:off_2048↓o
                db  72h ; r
                db  4Bh ; K
                db  5Eh ; ^
                db  13h
                db  58h ; X
                db  1Eh
                db  1Fh
                db  7Fh ; 
                db  5Eh ; ^
                db  53h ; S
                db  67h ; g
                db  40h ; @
                db  5Dh ; ]
                db  1Eh
                db  43h ; C
                db  1Fh
                db  7Dh ; }
                db  42h ; B
                db  12h
                db  59h ; Y
                db  5Dh ; ]
                db  7Ch ; |
                db  7Dh ; }
                db  47h ; G
                db  6Fh ; o
                db  4Dh ; M
                db  19h
                db  5Ch ; \
                db  6Bh ; k
                db  48h ; H
                db  7Dh ; }
                db  70h ; p
                db  4Bh ; K
                db  43h ; C
                db  40h ; @
                db  7Eh ; ~
                db  7Dh ; }
                db  7Ah ; z
                db  12h
                db    0
                db    0
                db    0
                db    0
_rodata         ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use32
                assume cs:_eh_frame_hdr
                ;org 0A94h
unk_A94         db    1                 ; DATA XREF: LOAD:000000FC↑o
                db  1Bh
                db    3
                db  3Bh ; ;
                db  48h ; H
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db 0ECh
                db 0FAh
                db 0FFh
                db 0FFh
                db  64h ; d
                db    0
                db    0
                db    0
                db 0CCh
                db 0FBh
                db 0FFh
                db 0FFh
                db  88h
                db    0
                db    0
                db    0
                db 0DCh
                db 0FBh
                db 0FFh
                db 0FFh
                db  5Ch ; \
                db    1
                db    0
                db    0
                db  0Ch
                db 0FEh
                db 0FFh
                db 0FFh
                db  9Ch
                db    0
                db    0
                db    0
                db  4Ch ; L
                db 0FEh
                db 0FFh
                db 0FFh
                db 0C8h
                db    0
                db    0
                db    0
                db  8Ch
                db 0FEh
                db 0FFh
                db 0FFh
                db  0Ch
                db    1
                db    0
                db    0
                db 0ECh
                db 0FEh
                db 0FFh
                db 0FFh
                db  9Ch
                db    1
                db    0
                db    0
                db  4Ch ; L
                db 0FFh
                db 0FFh
                db 0FFh
                db 0E8h
                db    1
                db    0
                db    0
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment dword public 'CONST' use32
                assume cs:_eh_frame
                ;org 0AE0h
                db  14h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db  7Ah ; z
                db  52h ; R
                db    0
                db    1
                db  7Ch ; |
                db    8
                db    1
                db  1Bh
                db  0Ch
                db    4
                db    4
                db  88h
                db    1
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  80h
                db 0FAh
                db 0FFh
                db 0FFh
                db 0E0h
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db    8
                db  46h ; F
                db  0Eh
                db  0Ch
                db  4Ah ; J
                db  0Fh
                db  0Bh
                db  74h ; t
                db    4
                db  78h ; x
                db    0
                db  3Fh ; ?
                db  1Ah
                db  3Bh ; ;
                db  2Ah ; *
                db  32h ; 2
                db  24h ; $
                db  22h ; "
                db  10h
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  3Ch ; <
                db 0FBh
                db 0FFh
                db 0FFh
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db  54h ; T
                db    0
                db    0
                db    0
                db  68h ; h
                db 0FDh
                db 0FFh
                db 0FFh
                db  32h ; 2
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  83h
                db    2
                db  4Eh ; N
                db  0Eh
                db  10h
                db  48h ; H
                db  0Eh
                db  14h
                db  41h ; A
                db  0Eh
                db  18h
                db  41h ; A
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  20h
                db  56h ; V
                db  0Eh
                db    8
                db  41h ; A
                db 0C3h
                db  0Eh
                db    4
                db  40h ; @
                db    0
                db    0
                db    0
                db  80h
                db    0
                db    0
                db    0
                db  7Ch ; |
                db 0FDh
                db 0FFh
                db 0FFh
                db  3Bh ; ;
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  87h
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  86h
                db    3
                db  41h ; A
                db  0Eh
                db  10h
                db  83h
                db    4
                db  4Eh ; N
                db  0Eh
                db  1Ch
                db  47h ; G
                db  0Eh
                db  20h
                db  52h ; R
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  18h
                db  41h ; A
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  20h
                db  48h ; H
                db  0Eh
                db  10h
                db  43h ; C
                db 0C3h
                db  0Eh
                db  0Ch
                db  41h ; A
                db 0C6h
                db  0Eh
                db    8
                db  41h ; A
                db 0C7h
                db  0Eh
                db    4
                db    0
                db    0
                db    0
                db  4Ch ; L
                db    0
                db    0
                db    0
                db 0C4h
                db    0
                db    0
                db    0
                db  78h ; x
                db 0FDh
                db 0FFh
                db 0FFh
                db  51h ; Q
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  87h
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  86h
                db    3
                db  41h ; A
                db  0Eh
                db  10h
                db  83h
                db    4
                db  4Eh ; N
                db  0Eh
                db  1Ch
                db  47h ; G
                db  0Eh
                db  20h
                db  52h ; R
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  18h
                db  41h ; A
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  20h
                db  46h ; F
                db  0Eh
                db  1Ch
                db  41h ; A
                db  0Eh
                db  18h
                db  41h ; A
                db  0Eh
                db  1Ch
                db  44h ; D
                db  0Eh
                db  20h
                db  52h ; R
                db  0Eh
                db  10h
                db  43h ; C
                db 0C3h
                db  0Eh
                db  0Ch
                db  41h ; A
                db 0C6h
                db  0Eh
                db    8
                db  41h ; A
                db 0C7h
                db  0Eh
                db    4
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    0
                db    0
                db  14h
                db    1
                db    0
                db    0
                db  78h ; x
                db 0FAh
                db 0FFh
                db 0FFh
                db 0BDh
                db    0
                db    0
                db    0
                db    0
                db  44h ; D
                db  0Ch
                db    1
                db    0
                db  47h ; G
                db  10h
                db    5
                db    2
                db  75h ; u
                db    0
                db  44h ; D
                db  10h
                db    6
                db    2
                db  75h ; u
                db  7Ch ; |
                db  10h
                db    3
                db    2
                db  75h ; u
                db  78h ; x
                db  4Ch ; L
                db  0Fh
                db    3
                db  75h ; u
                db  74h ; t
                db    6
                db    2
                db  82h
                db  0Ah
                db 0C1h
                db  0Ch
                db    1
                db    0
                db  41h ; A
                db 0C3h
                db  41h ; A
                db 0C6h
                db  41h ; A
                db 0C5h
                db  43h ; C
                db  0Ch
                db    4
                db    4
                db  41h ; A
                db  0Bh
                db    0
                db  48h ; H
                db    0
                db    0
                db    0
                db  54h ; T
                db    1
                db    0
                db    0
                db  48h ; H
                db 0FDh
                db 0FFh
                db 0FFh
                db  5Dh ; ]
                db    0
                db    0
                db    0
                db    0
                db  41h ; A
                db  0Eh
                db    8
                db  85h
                db    2
                db  41h ; A
                db  0Eh
                db  0Ch
                db  87h
                db    3
                db  41h ; A
                db  0Eh
                db  10h
                db  86h
                db    4
                db  41h ; A
                db  0Eh
                db  14h
                db  83h
                db    5
                db  4Eh ; N
                db  0Eh
                db  20h
                db  69h ; i
                db  0Eh
                db  24h ; $
                db  44h ; D
                db  0Eh
                db  28h ; (
                db  44h ; D
                db  0Eh
                db  2Ch ; ,
                db  41h ; A
                db  0Eh
                db  30h ; 0
                db  4Dh ; M
                db  0Eh
                db  20h
                db  47h ; G
                db  0Eh
                db  14h
                db  41h ; A
                db 0C3h
                db  0Eh
                db  10h
                db  41h ; A
                db 0C6h
                db  0Eh
                db  0Ch
                db  41h ; A
                db 0C7h
                db  0Eh
                db    8
                db  41h ; A
                db 0C5h
                db  0Eh
                db    4
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db 0A0h
                db    1
                db    0
                db    0
                db  5Ch ; \
                db 0FDh
                db 0FFh
                db 0FFh
                db    2
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_init_array     segment dword public 'DATA' use32
                assume cs:_init_array
                ;org 1EE8h
off_1EE8        dd offset sub_860       ; DATA XREF: LOAD:0000009C↑o
                                        ; LOAD:0000013C↑o ...
_init_array     ends

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_fini_array     segment dword public 'DATA' use32
                assume cs:_fini_array
                ;org 1EECh
off_1EEC        dd offset sub_810       ; DATA XREF: sub_980+16↑o
_fini_array     ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_jcr            segment dword public 'DATA' use32
                assume cs:_jcr
                ;org 1EF0h
unk_1EF0        db    0                 ; DATA XREF: sub_860+B↑o
                db    0
                db    0
                db    0
_jcr            ends

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use32
                assume cs:LOAD
                ;org 1EF4h
stru_1EF4       Elf32_Dyn <1, <1>>      ; DATA XREF: LOAD:000000BC↑o
                                        ; .got.plt:00002000↓o
                                        ; DT_NEEDED libc.so.6
                Elf32_Dyn <0Ch, <554h>> ; DT_INIT
                Elf32_Dyn <0Dh, <9E4h>> ; DT_FINI
                Elf32_Dyn <19h, <1EE8h>> ; DT_INIT_ARRAY
                Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
                Elf32_Dyn <1Ah, <1EECh>> ; DT_FINI_ARRAY
                Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
                Elf32_Dyn <6FFFFEF5h, <1ACh>> ; DT_GNU_HASH
                Elf32_Dyn <5, <330h>>   ; DT_STRTAB
                Elf32_Dyn <6, <1D0h>>   ; DT_SYMTAB
                Elf32_Dyn <0Ah, <107h>> ; DT_STRSZ
                Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
                Elf32_Dyn <15h, <0>>    ; DT_DEBUG
                Elf32_Dyn <3, <2000h>>  ; DT_PLTGOT
                Elf32_Dyn <2, <68h>>    ; DT_PLTRELSZ
                Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
                Elf32_Dyn <17h, <4ECh>> ; DT_JMPREL
                Elf32_Dyn <11h, <494h>> ; DT_REL
                Elf32_Dyn <12h, <58h>>  ; DT_RELSZ
                Elf32_Dyn <13h, <8>>    ; DT_RELENT
                Elf32_Dyn <6FFFFFFBh, <8000000h>> ; DT_FLAGS_1
                Elf32_Dyn <6FFFFFFEh, <464h>> ; DT_VERNEED
                Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
                Elf32_Dyn <6FFFFFF0h, <438h>> ; DT_VERSYM
                Elf32_Dyn <6FFFFFFAh, <5>> ; DT_RELCOUNT
                Elf32_Dyn <0>           ; DT_NULL
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got            segment dword public 'DATA' use32
                assume cs:_got
                ;org 1FE4h
_ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: sub_780+1E↑r
__cxa_finalize_ptr dd offset __cxa_finalize
                                        ; DATA XREF: sub_810+1B↑r
__gmon_start___ptr dd offset __gmon_start__
                                        ; DATA XREF: _init_proc+F↑r
stdin_ptr       dd offset stdin         ; DATA XREF: main+41↑r
main_ptr        dd offset main          ; DATA XREF: start+26↑r
_Jv_RegisterClasses_ptr dd offset _Jv_RegisterClasses
                                        ; DATA XREF: sub_860:loc_880↑r
_ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got_plt        segment dword public 'DATA' use32
                assume cs:_got_plt
                ;org 2000h
                dd offset stru_1EF4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
off_200C        dd offset strcmp        ; DATA XREF: _strcmp↑r
off_2010        dd offset printf        ; DATA XREF: _printf↑r
off_2014        dd offset strcspn       ; DATA XREF: _strcspn↑r
off_2018        dd offset free          ; DATA XREF: _free↑r
off_201C        dd offset fgets         ; DATA XREF: _fgets↑r
off_2020        dd offset getegid       ; DATA XREF: _getegid↑r
off_2024        dd offset puts          ; DATA XREF: _puts↑r
off_2028        dd offset system        ; DATA XREF: _system↑r
off_202C        dd offset strlen        ; DATA XREF: _strlen↑r
off_2030        dd offset __libc_start_main
                                        ; DATA XREF: ___libc_start_main↑r
off_2034        dd offset __strdup      ; DATA XREF: ___strdup↑r
off_2038        dd offset memfrob       ; DATA XREF: _memfrob↑r
off_203C        dd offset setresgid     ; DATA XREF: _setresgid↑r
_got_plt        ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment dword public 'DATA' use32
                assume cs:_data
                ;org 2040h
                db    0
                db    0
                db    0
                db    0
off_2044        dd offset off_2044      ; DATA XREF: sub_810+28↑r
                                        ; .data:off_2044↓o
off_2048        dd offset unk_A68       ; DATA XREF: sub_920+11↑r
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment byte public 'BSS' use32
                assume cs:_bss
                ;org 204Ch
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
byte_204C       db ?                    ; DATA XREF: sub_780+B↑o
                                        ; sub_810+12↑r ...
                db    ? ;
                db    ? ;
unk_204F        db    ? ;               ; DATA XREF: sub_780+11↑o
_bss            ends

; ===========================================================================

; Segment type: Externs
; extern
                extrn strcmp:near       ; CODE XREF: _strcmp↑j
                                        ; DATA XREF: .got.plt:off_200C↑o
                extrn printf:near       ; CODE XREF: _printf↑j
                                        ; DATA XREF: .got.plt:off_2010↑o
                extrn strcspn:near      ; CODE XREF: _strcspn↑j
                                        ; DATA XREF: .got.plt:off_2014↑o
                extrn free:near         ; CODE XREF: _free↑j
                                        ; DATA XREF: .got.plt:off_2018↑o
                extrn fgets:near        ; CODE XREF: _fgets↑j
                                        ; DATA XREF: .got.plt:off_201C↑o
                extrn getegid:near      ; CODE XREF: _getegid↑j
                                        ; DATA XREF: .got.plt:off_2020↑o
                extrn __cxa_finalize:near ; weak
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
                extrn puts:near         ; CODE XREF: _puts↑j
                                        ; DATA XREF: .got.plt:off_2024↑o
                extrn system:near       ; CODE XREF: _system↑j
                                        ; DATA XREF: .got.plt:off_2028↑o
                extrn strlen:near       ; CODE XREF: _strlen↑j
                                        ; DATA XREF: .got.plt:off_202C↑o
; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: ___libc_start_main↑j
                                        ; DATA XREF: .got.plt:off_2030↑o
                extrn stdin             ; DATA XREF: .got:stdin_ptr↑o
                extrn __strdup:near     ; CODE XREF: ___strdup↑j
                                        ; DATA XREF: .got.plt:off_2034↑o
                extrn memfrob:near      ; CODE XREF: _memfrob↑j
                                        ; DATA XREF: .got.plt:off_2038↑o
                extrn setresgid:near    ; CODE XREF: _setresgid↑j
                                        ; DATA XREF: .got.plt:off_203C↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__ ; weak
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _Jv_RegisterClasses ; weak
                                        ; DATA XREF: .got:_Jv_RegisterClasses_ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end start
